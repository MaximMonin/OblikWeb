<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:classes="oblik.basetype.*"
	paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="0" 
	width="100%" height="100%" label="{RM('ServiceTypesTitle')}"  initialize="init()">
    <mx:Script>
        <![CDATA[

// Copyright (C) Maxim A. Monin 2009-2010 

			import flash.events.Event;
			import flash.events.KeyboardEvent;
			import flash.events.MouseEvent;
			import mx.resources.ResourceManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
    	   	import mx.rpc.soap.Operation;
	       	import mx.rpc.soap.WebService;
	       	import mx.controls.Alert;
            import mx.utils.ObjectUtil;  
        	import mx.collections.ArrayCollection;

        	import oblik.basetype.OblikCharacter;

			private var srv:WebService;
			private var ReadOper:Operation;
			private var SaveOper:Operation;
			private var ContextId:String;
			private var ReadOnly:Boolean;
			private var _init:Boolean = false;
			private var dp:ArrayCollection;

			private function init():void
			{
				if (_init == true) return;
				srv = new WebService();
				ReadOper = new Operation(null, "ReadServiceTypes");
				ReadOper.addEventListener(ResultEvent.RESULT, OnDBList, false, 0, true);
				ReadOper.addEventListener(FaultEvent.FAULT, Onfault, false, 0, true);
				SaveOper = new Operation(null, "SaveServiceTypes");
				SaveOper.addEventListener(ResultEvent.RESULT, OnSave, false, 0, true);
				SaveOper.addEventListener(FaultEvent.FAULT, Onfault, false, 0, true);
				srv.operations = [ReadOper,SaveOper];
				_init = true;
			}
			public function Initialize ( iReadOnly:Boolean, servicepath:String, iContextId:String):void 
        	{
				srv.wsdl = servicepath;
				ContextId = iContextId;
				ReadOnly = iReadOnly;
				newButton.enabled = !ReadOnly;
				deleteButton.enabled = !ReadOnly;
				saveButton.enabled = !ReadOnly;
				if (ReadOnly == true)
				{
					this.label += " (" + RM('ReadOnly') + ")";
		
		   			var dgc:DataGridColumn;
					var or:Object = new Object ();
					var cf:ClassFactory;
					or["ReadOnly"] = ReadOnly;
					
					for (var i:int=0;i<dg.columns.length;i++)
					{
						dgc = dg.columns[i];
						if (dgc.dataField == 'STName' || dgc.dataField == 'ImagePath')
						{
		   					cf = new ClassFactory(oblik.basetype.OblikCharacter);
							cf.properties = or;
							dgc.itemRenderer = cf;
						}
					}
				}
				srv.loadWSDL();
				
				UpdateData ();
	       	}
			private function RM (messname:String):String
			{
				return ResourceManager.getInstance().getString('SystemAdmin',messname);
			}
        	private function Onfault(event:FaultEvent):void
        	{
            	Alert.show(event.fault.faultString, RM('ConnectionError'));
        	}
	        private function OnDBList(event:ResultEvent):void
    	    {
          		dp = event.result.STList;
	  			dg.dataProvider = dp;
        	}
        	private function NewRecord ():void
        	{
        		if (ReadOnly == false)
        		{
					var newRowObj:Object = CreateEmptyRow ();
   					dp.addItem (newRowObj);
        		}
        	}
            private function CreateEmptyRow():Object
            {
            	var newObjRow:Object = new Object ();

    			var oColumnDef:Object;
                var aColumnDef:Array = dg.columns;         
				newObjRow ['STRid'] = 0;
    			for (var i:int=0;i<aColumnDef.length;i++)  
    			{                  
      				oColumnDef = aColumnDef[i];
   					newObjRow [oColumnDef.dataField] = "";     
      			}
            	return newObjRow;
            }
        	
        	private function DeleteRecord ():void
        	{
        		if (ReadOnly == false && dg.selectedItem)
        		{
					if (dg.selectedItem.Services == '')
						dp.removeItemAt(dg.selectedIndex);
					else
	    	    		Alert.show(RM('ServiceTypesCantDelete'));
   				}
        	}
        	private function SaveData ():void
        	{
        		if (ReadOnly == false)
        			SaveOper.send (ContextId, dp);
        	}
        	private function UpdateData ():void
        	{
				ReadOper.send (ContextId);
        	}
        	private function OnSave(event:ResultEvent):void
        	{
	        	if (event.result.OutMessage == "Error")
	        	{
    	    		Alert.show(RM('ServiceTypesSaveError'));
    	    		UpdateData ();
    	    	}
        		if (event.result.OutMessage == "OK")
					this.dispatchEvent(new Event('CloseTab', true));
        	}
        ]]>
    </mx:Script>
    <mx:HBox width="100%" height="30" verticalAlign="middle" horizontalAlign="left" id="ControlArea" borderStyle="solid" paddingLeft="5">
        <mx:LinkButton toolTip="{RM('STNew')}" id="newButton" icon="@Embed('new.png')" width="16" height="16" click="NewRecord()"/>
        <mx:LinkButton toolTip="{RM('STDelete')}" id="deleteButton" icon="@Embed('delete.png')" width="16" height="16" click="DeleteRecord()"/>
        <mx:LinkButton toolTip="{RM('STSave')}" id="saveButton" icon="@Embed('save.png')" width="16" height="16" click="SaveData()"/>
        <mx:Spacer width="15"/>
        <mx:LinkButton toolTip="{RM('STUpdate')}" id="updateButton" icon="@Embed('update.png')" width="16" height="16" click="UpdateData()"/>
    </mx:HBox>
    <mx:VBox height="100%" width="100%">
        <mx:DataGrid width="100%" height="100%" id="dg">
            <mx:columns>
                <mx:DataGridColumn headerText="{RM('STName')}" dataField="STName" width="200" itemRenderer="oblik.basetype.OblikCharacter"/>
                <mx:DataGridColumn headerText="{RM('STImagePath')}" dataField="ImagePath" itemRenderer="oblik.basetype.OblikCharacter"/>
                <mx:DataGridColumn headerText="{RM('STServices')}" dataField="Services"/>
			</mx:columns>
        </mx:DataGrid>
    </mx:VBox>
</mx:VBox>
